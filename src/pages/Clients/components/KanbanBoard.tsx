// src/pages/Clients/components/KanbanBoard.tsx
import React, { useState, useCallback, useMemo } from 'react';
import {
  DndContext,
  DragEndEvent,
  DragOverEvent,
  DragOverlay,
  DragStartEvent,
  closestCenter,
  KeyboardSensor,
  PointerSensor,
  useSensor,
  useSensors,
} from '@dnd-kit/core';
import { List as ListComponent } from './List';
import { useKanbanStore } from '../store/kanbanStore';
import { Card as CardType, List } from '../types';
import { Card } from './Card';
import { Plus } from 'lucide-react';
import { useThemeStore } from '../../../store/themeStore';
import { useToast } from '../../../hooks/useToast';

// Cores predefinidas - movidas para fora do componente para evitar recriação
const PREDEFINED_COLORS = [
  '#FF4136', // Vermelho
  '#FF851B', // Laranja
  '#FFDC00', // Amarelo
  '#2ECC40', // Verde
  '#00B5AD', // Verde-água
  '#39CCCC', // Ciano
  '#0074D9', // Azul
  '#7F00FF', // Roxo
  '#B10DC9', // Roxo escuro
  '#F012BE', // Rosa
  '#FF4081', // Rosa claro
  '#85144b', // Vinho
];

export function KanbanBoard() {
  console.log('Renderizando KanbanBoard');
  const { boards, activeBoard, moveCard, addList, cleanupStorage } = useKanbanStore();
  const [activeCard, setActiveCard] = useState<CardType | null>(null);
  const [activeListId, setActiveListId] = useState<string | null>(null);
  const [overListId, setOverListId] = useState<string | null>(null);
  const [showCreateListModal, setShowCreateListModal] = useState(false);
  const [newListTitle, setNewListTitle] = useState('');
  const [newListColor, setNewListColor] = useState('');
  const { theme } = useThemeStore();
  const { showToast } = useToast();
  const isDark = theme === 'dark';
  
  // useMemo para evitar recriação do board a cada render
  const board = useMemo(() => 
    boards.find((b) => b.id === activeBoard), 
    [boards, activeBoard]
  );

  // useSensors não muda, então podemos memoizar
  const sensors = useSensors(
    useSensor(PointerSensor, {
      activationConstraint: {
        distance: 8,
      },
    })
  );

  // Memoizar handlers usando useCallback para evitar recriar funções
  const handleDragStart = useCallback((event: any) => {
    if (event.active.data.current?.type === 'card') {
      const { cardId, listId } = event.active.data.current;
      if (!board) return;
      
      const list = board.lists?.find(l => l.id === listId);
      const card = list?.cards?.find(c => c.id === cardId);
      
      if (card) {
        setActiveCard(card);
        setActiveListId(listId);
      }
    }
  }, [board]);

  const handleDragOver = useCallback((event: any) => {
    if (event.over && event.active.data.current?.type === 'card') {
      const overId = event.over.id;
      if (overId !== overListId) {
        setOverListId(overId);
      }
    }
  }, [overListId]);

  const handleDragEnd = useCallback((event: DragEndEvent) => {
    try {
      setActiveCard(null);
      setActiveListId(null);
      setOverListId(null);

      const { active, over } = event;
      if (!over || !board) return;

      const activeId = active.id;
      const overId = over.id;

      if (activeId === overId) return;

      const activeData = active.data.current;
      const overData = over.data.current;

      if (activeData?.type === 'card' && overData?.type === 'list') {
        moveCard(
          activeData.boardId,
          activeData.listId,
          overData.listId,
          activeData.cardId
        );
      }
    } catch (error) {
      if (error instanceof Error && error.message.includes('exceeded the quota')) {
        showToast({
          title: 'Limpeza de dados',
          description: 'Realizando limpeza de dados antigos...',
          type: 'info'
        });
        
        cleanupStorage();
        
        showToast({
          title: 'Limpeza concluída',
          description: 'Os dados foram otimizados. Tente mover o cartão novamente.',
          type: 'success'
        });
      } else {
        showToast({
          title: 'Erro',
          description: 'Ocorreu um erro ao mover o cartão',
          type: 'error'
        });
        console.error('Erro ao mover cartão:', error);
      }
    }
  }, [board, moveCard, showToast, cleanupStorage]);

  const handleAddList = useCallback(() => {
    setShowCreateListModal(true);
  }, []);

  const handleCreateList = useCallback(() => {
    if (newListTitle.trim() && board) {
      const newList = {
        id: '', // will be generated by the store
        title: newListTitle.trim(),
        cards: [],
        color: newListColor || undefined
      };
      addList(board.id, newList);
      setNewListTitle('');
      setNewListColor('');
      setShowCreateListModal(false);
    }
  }, [newListTitle, newListColor, board, addList]);

  const handleCloseModal = useCallback(() => {
    setShowCreateListModal(false);
    setNewListTitle('');
    setNewListColor('');
  }, []);

  const handleColorSelect = useCallback((color: string) => {
    setNewListColor(color);
  }, []);

  const handleListTitleChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {
    setNewListTitle(e.target.value);
  }, []);

  // Se não há board ativo, não renderizar nada
  if (!board) return null;

  return (
    <DndContext
      sensors={sensors}
      collisionDetection={closestCenter}
      onDragStart={handleDragStart}
      onDragOver={handleDragOver}
      onDragEnd={handleDragEnd}
    >
      <div className="flex flex-col min-h-[calc(100vh-10vh)] bg-background dark:bg-background">
        <div className="flex gap-4 p-4 overflow-x-auto min-w-full scrollbar-thin scrollbar-thumb-gray-300 dark:scrollbar-thumb-gray-600 scrollbar-track-transparent [&::-webkit-scrollbar]:h-2">
          <div className="flex gap-4">
            {board?.lists?.map((list) => (
              <ListComponent 
                key={list.id} 
                list={list} 
                boardId={board.id}
                isOver={list.id === overListId}
                activeCard={activeCard}
              />
            ))}
            <button
              onClick={handleAddList}
              className={`h-12 px-4 flex items-center justify-center gap-2 rounded-lg border-2 border-dashed ${
                isDark 
                  ? 'border-gray-600 hover:border-gray-500 text-gray-300' 
                  : 'border-gray-300 hover:border-gray-400 text-gray-600'
              } transition-colors`}
            >
              <Plus size={20} />
              <span>Nova Lista</span>
            </button>
          </div>
        </div>

        {showCreateListModal && (
          <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50">
            <div className={`w-full max-w-md p-6 rounded-lg shadow-xl ${isDark ? 'bg-dark-800' : 'bg-white'}`}>
              <h3 className={`text-lg font-medium mb-4 ${isDark ? 'text-gray-100' : 'text-gray-900'}`}>
                Nova Lista
              </h3>
              
              <div className="space-y-4">
                <div>
                  <label className={`block text-sm font-medium mb-1 ${isDark ? 'text-gray-300' : 'text-gray-700'}`}>
                    Nome da lista
                  </label>
                  <input
                    type="text"
                    value={newListTitle}
                    onChange={handleListTitleChange}
                    className={`w-full px-3 py-2 rounded-lg border ${
                      isDark 
                        ? 'bg-dark-700 border-gray-600 text-gray-100' 
                        : 'bg-white border-gray-300 text-gray-900'
                    } focus:outline-none focus:ring-2 focus:ring-[#7f00ff]`}
                    placeholder="Digite o nome da lista"
                    autoFocus
                  />
                </div>

                <div>
                  <label className={`block text-sm font-medium mb-1 ${isDark ? 'text-gray-300' : 'text-gray-700'}`}>
                    Cor (opcional)
                  </label>
                  <div className="flex flex-wrap gap-2">
                    {PREDEFINED_COLORS.map((color) => (
                      <button
                        key={color}
                        onClick={() => handleColorSelect(color)}
                        className={`w-8 h-8 rounded-full transition-all ${
                          newListColor === color ? 'ring-2 ring-[#7f00ff] ring-offset-2 ring-offset-dark-800' : ''
                        }`}
                        style={{ backgroundColor: color }}
                      />
                    ))}
                  </div>
                </div>
              </div>

              <div className="flex justify-end gap-3 mt-6">
                <button
                  onClick={handleCloseModal}
                  className={`px-4 py-2 rounded-lg ${
                    isDark 
                      ? 'text-gray-300 hover:bg-gray-700' 
                      : 'text-gray-700 hover:bg-gray-100'
                  }`}
                >
                  Cancelar
                </button>
                <button
                  onClick={handleCreateList}
                  disabled={!newListTitle.trim()}
                  className="px-4 py-2 bg-[#7f00ff] text-white rounded-lg hover:bg-[#7f00ff]/90 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  Criar Lista
                </button>
              </div>
            </div>
          </div>
        )}
      </div>

      {activeCard && (
        <DragOverlay dropAnimation={null}>
          <Card
            card={activeCard}
            boardId={board.id}
            listId={activeListId || ''}
            isDragging
            className="kanban-card--drag-overlay"
          />
        </DragOverlay>
      )}
    </DndContext>
  );
}
